// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opensnitch/network/network.proto

package network // import "github.com/evilsocket/opensnitch/network"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Connection_Protocol int32

const (
	Connection_UNKNOWN Connection_Protocol = 0
	Connection_TCP     Connection_Protocol = 1
	Connection_UDP     Connection_Protocol = 2
)

var Connection_Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "TCP",
	2: "UDP",
}
var Connection_Protocol_value = map[string]int32{
	"UNKNOWN": 0,
	"TCP":     1,
	"UDP":     2,
}

func (x Connection_Protocol) String() string {
	return proto.EnumName(Connection_Protocol_name, int32(x))
}
func (Connection_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_network_9eddb9a383840336, []int{0, 0}
}

// Connection represents a network connection that the user is to decide
// whether to allow or deny
type Connection struct {
	Protocol             Connection_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=opensnitch.network.Connection_Protocol" json:"protocol,omitempty"`
	SrcIp                string              `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcPort              uint32              `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstIp                string              `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstHost              string              `protobuf:"bytes,5,opt,name=dst_host,json=dstHost,proto3" json:"dst_host,omitempty"`
	DstPort              uint32              `protobuf:"varint,6,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	UserId               uint32              `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProcessId            uint32              `protobuf:"varint,8,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	ProcessPath          string              `protobuf:"bytes,9,opt,name=process_path,json=processPath,proto3" json:"process_path,omitempty"`
	ProcessArgs          []string            `protobuf:"bytes,10,rep,name=process_args,json=processArgs,proto3" json:"process_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_9eddb9a383840336, []int{0}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (dst *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(dst, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetProtocol() Connection_Protocol {
	if m != nil {
		return m.Protocol
	}
	return Connection_UNKNOWN
}

func (m *Connection) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *Connection) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Connection) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *Connection) GetDstHost() string {
	if m != nil {
		return m.DstHost
	}
	return ""
}

func (m *Connection) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Connection) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Connection) GetProcessId() uint32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *Connection) GetProcessPath() string {
	if m != nil {
		return m.ProcessPath
	}
	return ""
}

func (m *Connection) GetProcessArgs() []string {
	if m != nil {
		return m.ProcessArgs
	}
	return nil
}

func init() {
	proto.RegisterType((*Connection)(nil), "opensnitch.network.Connection")
	proto.RegisterEnum("opensnitch.network.Connection_Protocol", Connection_Protocol_name, Connection_Protocol_value)
}

func init() {
	proto.RegisterFile("opensnitch/network/network.proto", fileDescriptor_network_9eddb9a383840336)
}

var fileDescriptor_network_9eddb9a383840336 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0x5f, 0xda, 0xd7, 0x24, 0x9d, 0xbe, 0x27, 0x65, 0x41, 0x8c, 0x07, 0x21, 0xf6, 0x62,
	0xf4, 0x90, 0x82, 0x7e, 0x02, 0xad, 0x07, 0x8b, 0x50, 0x43, 0xb1, 0x08, 0x5e, 0x4a, 0xbb, 0x59,
	0x9a, 0xd0, 0x9a, 0x59, 0x76, 0xa6, 0xfa, 0xd9, 0xbd, 0xc9, 0x6e, 0x13, 0x5b, 0xe8, 0x29, 0xd9,
	0xff, 0xef, 0xff, 0x9b, 0x85, 0x59, 0x88, 0x51, 0xab, 0x8a, 0xaa, 0x92, 0x65, 0x31, 0xac, 0x14,
	0x7f, 0xa1, 0x59, 0x37, 0xdf, 0x54, 0x1b, 0x64, 0x14, 0x62, 0xdf, 0x48, 0x6b, 0x32, 0xf8, 0x6e,
	0x01, 0x8c, 0xb0, 0xaa, 0x94, 0xe4, 0x12, 0x2b, 0x31, 0x82, 0xd0, 0x75, 0x25, 0x6e, 0x22, 0x2f,
	0xf6, 0x92, 0x93, 0xdb, 0xab, 0xf4, 0xd8, 0x4a, 0xf7, 0x46, 0x9a, 0xd5, 0xf5, 0xe9, 0xaf, 0x28,
	0x4e, 0xc1, 0x27, 0x23, 0xe7, 0xa5, 0x8e, 0x5a, 0xb1, 0x97, 0x74, 0xa7, 0x1d, 0x32, 0x72, 0xac,
	0xc5, 0x39, 0x84, 0x36, 0xd6, 0x68, 0x38, 0x6a, 0xc7, 0x5e, 0xf2, 0x7f, 0x1a, 0x90, 0x91, 0x19,
	0x1a, 0xb6, 0x46, 0x4e, 0x6c, 0x8d, 0xbf, 0x3b, 0x23, 0x27, 0xde, 0x19, 0x36, 0x2e, 0x90, 0x38,
	0xea, 0x38, 0x10, 0xe4, 0xc4, 0x4f, 0x48, 0xdc, 0x20, 0x37, 0xcc, 0xdf, 0x0d, 0xcb, 0x89, 0xdd,
	0xb0, 0x33, 0x08, 0xb6, 0xa4, 0xcc, 0xbc, 0xcc, 0xa3, 0xc0, 0x11, 0xdf, 0x1e, 0xc7, 0xb9, 0xb8,
	0x00, 0xd0, 0x06, 0xa5, 0x22, 0xb2, 0x2c, 0x74, 0xac, 0x5b, 0x27, 0xe3, 0x5c, 0x5c, 0xc2, 0xbf,
	0x06, 0xeb, 0x05, 0x17, 0x51, 0xd7, 0xdd, 0xd8, 0xab, 0xb3, 0x6c, 0xc1, 0xc5, 0x61, 0x65, 0x61,
	0x56, 0x14, 0x41, 0xdc, 0x3e, 0xa8, 0xdc, 0x9b, 0x15, 0x0d, 0xae, 0x21, 0x6c, 0x56, 0x22, 0x7a,
	0x10, 0xcc, 0x26, 0xcf, 0x93, 0x97, 0xb7, 0x49, 0xff, 0x8f, 0x08, 0xa0, 0xfd, 0x3a, 0xca, 0xfa,
	0x9e, 0xfd, 0x99, 0x3d, 0x66, 0xfd, 0xd6, 0xc3, 0xcd, 0x7b, 0xb2, 0x2a, 0xb9, 0xd8, 0x2e, 0x53,
	0x89, 0x1f, 0x43, 0xf5, 0x59, 0x6e, 0x08, 0xe5, 0x5a, 0xf1, 0xf0, 0xf8, 0x25, 0x97, 0xbe, 0xdb,
	0xee, 0xdd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x16, 0xcf, 0x03, 0xe6, 0x01, 0x00, 0x00,
}
